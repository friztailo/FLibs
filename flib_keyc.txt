keyC = class("keyC")

local __all_keys__ = {}
local __keys__ = {}

function keyC:initialize(...)
    self.id = #__keys__ + 1
    
    if type(...) == "string" then
        self.__key_name__ = string.explode(" ", ...)
    elseif type(...) == "table" then
        self.__key_name__ = ...
    end
    
    if #self.__key_name__ > 1 then
        self._iscombination = true
    else
        self._iscombination = false
    end
    
    self._pressed = {}
    self._ispressed = false
    
    for i, k in pairs(string.explode(" ", ...)) do self._pressed[string.lower(k)] = false end
    
    self.click = function(value) end
    
    self.pressed = function() end
    self.onPressed = function() end
    
    self.released = function() end
    self.onReleased = function() end
    
    self.loop = function(value) end
    
    __keys__[self.id] = self
ens

function keyC:isCombination() return self._iscombination end

function keyC:getPressed() return self._pressed end
function keyC:isPressed() return self._ispressed end

hook.add("inputPressed", "__KeyCheck__", function(key)
    __all_keys__[string.lower(input.getKeyName(key))] = true

    for i, k in pairs(__keys__) do
        for a, b in pairs(k.__key_name__) do
            if __all_keys__[string.lower(b)] then
                if a == #k.__key_name__ then
                    if !k._ispressed then
                        k.pressed()
                        k.click(true)
                        k._ispressed = true
												 self._pressed[string.lower(k.__key_name__)] = true
                    end
                end
            else break end
        end
    end
end)

hook.add("inputReleased", "__KeyCheck__", function(key)
    __all_keys__[string.lower(input.getKeyName(key))] = false

    for i, k in pairs(__keys__) do
	for a, b in pairs(k.__key_name__) do
	    if !__all_keys__[string.lower(b)] then 
		if a == #k.__key_name__ then 
		    if k._ispressed then 
			k.released() 
			k.click(false) 
			k._ispressed = false 
			self._pressed[string.lower(k.__key_name__)] = false
		    end 
		end
	    else
		if k._ispressed then
		    k.released() 
		    k.click(false)
		    k._ispressed = false
		    self._pressed[string.lower(input.getKeyName(key))] = false
		end
		break 
	    end
	end
    end
end)

hook.add("Think", "__KeyCheck__", function() for i, k in pairs(__keys__) do k.loop(k._ispressed) end end)

return keyC
